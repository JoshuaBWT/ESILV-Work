var fs = require('fs');
var importJS = require('import_external_js');
var request = require('request');
var cheerio = require('cheerio');
var jquery = fs.readFileSync('./utils/jquery-1.11.3.min.js');

var utils = importJS("utils/utils.js");
var models = importJS("data/models.js");
var brands = JSON.parse(fs.readFileSync('./data/brands.json', 'utf8'));

function errortesting(url, trueJson)
{
    var error = {};
    error.haserror = false;
    if(url.indexOf("/voitures/") <= -1 || trueJson.subcat != "voitures")
    {
        //console.log("wrong category! (%s,%s)", url, trueJson.subcat);
        error.errortext = "Erreur leboncoin! Mauvaise categorie d offres! current type : "+ trueJson.subcat +"!";
        error.haserror = true;
    }
    return error;
}

function trytogetbrandandmodel(trueJson, callback)
{
  var brand, marque;
  var brands = JSON.parse(fs.readFileSync('./data/brands.json', 'utf8'));
  var split = trueJson.titre.split("_");
    for(var i = 0; i < split.length; i++)
    {
      for(var j = 0; j < brands.result.length; j++)
      {
        //console.log(brands.result[j].name);
        if(brands.result[j].id.toLowerCase().indexOf(split[i]) > -1)
        {
          trueJson.marque = split[i];
          //console.log(split[i]);
          break;
        }
      }
    }
  //trouver le modele de la voiture
  var nModels = models.getModels(trueJson.marque.toUpperCase());

  for(var i = 0; i < split.length; i++)
  {
    for(var j = 0; j < nModels.length; j++)
    {
       if(nModels[j].toLowerCase() == split[i])
       {
         trueJson.modele = split[i];
         callback(trueJson);
         j = nModels.length - 1;
         i = split.length - 1;
       }
    }
  }
}

function sendResults(url, err, trueJson, finalCallback)
{
  var result = null;
  if(trueJson)
  {
    //si il manque marque/modèle.
    if(!trueJson.marque || !trueJson.modele)
      trytogetbrandandmodel(function(json)
      {
          result = utils.convert_leboncoinJSON_into_appJSON(url, json);
          //console.log(result);
          finalCallback(result, err);
      });
      else {
        result = utils.convert_leboncoinJSON_into_appJSON(url, trueJson);
        //console.log(result);
        finalCallback(result, err);
      }
  }
  else
  //console.log(result);
  finalCallback(result, err);
}

module.exports =
{
    scrapData: function(url, finalCallback)
    {
      request(url, function(error, response, html){
       // First we'll check to make sure no errors occurred when making the request
       if(!error)
       {
               // Next, we'll utilize the cheerio library on the returned html which will essentially give us jQuery functionality
              var $ = cheerio.load(html);

              //Ici on récupère le script contenant les données au format txt.
              var stringedData = $("body").children()[0].children[0].data;

              //On eleve l'initialisation de la variable
              stringedData = stringedData.substr(17, stringedData.length);
              //On transforme le texte en JSON

              var trueJson = JSON.parse(JSON.stringify(eval("(" + stringedData + ")")));
              trueJson.description = $("[itemprop=description]").text();
              if(trueJson.nbphoto != '0')
              {
                trueJson.imgsrc = $("[itemprop=image]")[0].attribs["content"];
              }
              else {
                trueJson.imgsrc = "";
              }
              //console.log(trueJson.imgsrc);
              var err = errortesting(url, trueJson);
              //si la marque n'est pas spécifiée explicitement sur la page, on galère bien commme il faut
              //(donc on a récupéré une liste de toutes les marques de voiture au monde et on va fouiller un peu)
              if(err.haserror)
                sendResults("", err, null, finalCallback);
              else
                sendResults(url, err, trueJson, finalCallback);
              /*
              if(!trueJson.marque || !trueJson.modele)
              {
                  trueJson = trytogetbrandandmodel(trueJson, function(trueJson)
                  {
                    sendResults(url, err, trueJson, brands, finalCallback);
                  });
              }
              else {
                  sendResults(url, err, trueJson, finalCallback);
              }
              */
       }
       else {
          console.log(error)
       }
     });
    }
}
